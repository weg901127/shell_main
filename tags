!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARRAYLIST_H	srcs/array_list/arraylist.h	/^# define ARRAYLIST_H$/;"	d
BUFFER_SIZE	gnl/get_next_line.h	/^#  define BUFFER_SIZE /;"	d
CC	Makefile	/^CC 					= cc -g$/;"	m
CC	libft/Makefile	/^CC      = cc -g$/;"	m
CD_	micro_shell.h	/^	CD_,$/;"	e	enum:e_builtins
CFLAGS	Makefile	/^CFLAGS 				= -Wall -Wextra -Werror$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS  = -Wall -Wextra -Werror$/;"	m
ECHO_	micro_shell.h	/^	ECHO_,$/;"	e	enum:e_builtins
ENV_	micro_shell.h	/^	ENV_,$/;"	e	enum:e_builtins
EXIT_	micro_shell.h	/^	EXIT_$/;"	e	enum:e_builtins
EXPORT_	micro_shell.h	/^	EXPORT_,$/;"	e	enum:e_builtins
FALSE	srcs/array_list/arraylist.h	/^#  define FALSE	/;"	d
FD	libft/Makefile	/^FD		= ft_putnbr_fd.c ft_putstr_fd.c \\$/;"	m
GET_NEXT_LINE_H	gnl/get_next_line.h	/^# define GET_NEXT_LINE_H$/;"	d
INC	libft/Makefile	/^INC     = .\/libft.h$/;"	m
INT_MAX	libft/libft.h	/^#  define INT_MAX /;"	d
INT_MIN	libft/libft.h	/^#  define INT_MIN /;"	d
IREADLINE	Makefile	/^IREADLINE			= -I \/Users\/gilee\/brew\/opt\/readline\/include\/$/;"	m
IS	libft/Makefile	/^IS		= ft_isalnum.c ft_isalpha.c \\$/;"	m
LIB	Makefile	/^LIB					= $(LIBFT_DIR)$(LIBFT_NAME)$/;"	m
LIB	libft/Makefile	/^LIB		= ar rcs$/;"	m
LIBFT_DIR	Makefile	/^LIBFT_DIR 			= .\/libft\/$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LIBFT_NAME	Makefile	/^LIBFT_NAME			= libft.a$/;"	m
LREADLINE	Makefile	/^LREADLINE			= -L \/Users\/gilee\/brew\/opt\/readline\/lib\/$/;"	m
LST	libft/Makefile	/^LST		= ft_lstmap.c ft_lstnew.c \\$/;"	m
MEM	libft/Makefile	/^MEM		= ft_memchr.c ft_memcmp.c \\$/;"	m
MICRO_SHELL_H	micro_shell.h	/^# define MICRO_SHELL_H$/;"	d
NAME	Makefile	/^NAME  				= minishell$/;"	m
NAME	libft/Makefile	/^NAME	= libft.a$/;"	m
OBJ	Makefile	/^OBJ					=	$(SRCS:.c=.o)$/;"	m
OBJ_FD	libft/Makefile	/^OBJ_FD	= $(FD:.c=.o)$/;"	m
OBJ_IS	libft/Makefile	/^OBJ_IS	= $(IS:.c=.o)$/;"	m
OBJ_LST	libft/Makefile	/^OBJ_LST	= $(LST:.c=.o)$/;"	m
OBJ_MEM	libft/Makefile	/^OBJ_MEM	= $(MEM:.c=.o)$/;"	m
OBJ_STR	libft/Makefile	/^OBJ_STR	= $(STR:.c=.o)$/;"	m
PWD_	micro_shell.h	/^	PWD_,$/;"	e	enum:e_builtins
RM	libft/Makefile	/^RM      = rm -f$/;"	m
SRCS	Makefile	/^SRCS				= .\/main_02.c					.\/srcs\/init\/init_rl_catch_signals.c \\$/;"	m
STR	libft/Makefile	/^STR		= ft_strchr.c ft_strdup.c \\$/;"	m
TRUE	srcs/array_list/arraylist.h	/^#  define TRUE	/;"	d
UNSET_	micro_shell.h	/^	UNSET_,$/;"	e	enum:e_builtins
_COMMON_LIST_DEF_	srcs/array_list/arraylist.h	/^#  define _COMMON_LIST_DEF_$/;"	d
addALElement	srcs/array_list/arraylist.c	/^int	addALElement(t_ArrayList *pList, int position, t_ArrayListNode element)$/;"	f
allfree	libft/ft_split.c	/^static void	allfree(char **res, int i)$/;"	f	file:
builtin	micro_shell.h	/^	t_ArrayList	*builtin;$/;"	m	struct:s_bag
clearArrayList	srcs/array_list/array_utils.c	/^void	clearArrayList(t_ArrayList *pList)$/;"	f
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list
createArrayList	srcs/array_list/arraylist.c	/^t_ArrayList	*createArrayList(int maxElementCount)$/;"	f
create_bag	main_02.c	/^t_bag	*create_bag()$/;"	f
currentElementCount	srcs/array_list/arraylist.h	/^	int				currentElementCount;$/;"	m	struct:s_ArrayListType
data	srcs/array_list/arraylist.h	/^	char	*data;$/;"	m	struct:s_ArrayListNodeType
deleteArrayList	srcs/array_list/arraylist.c	/^void	deleteArrayList(t_ArrayList *pList)$/;"	f
e_builtins	micro_shell.h	/^typedef	enum e_builtins$/;"	g
find_return	gnl/get_next_line.c	/^int	find_return(int fd, char **backup, char **cur)$/;"	f
ft_abs	libft/ft_itoa.c	/^static int	ft_abs(int num)$/;"	f	file:
ft_abs	libft/ft_putnbr_fd.c	/^static int	ft_abs(int num)$/;"	f	file:
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *str)$/;"	f
ft_bk	libft/ft_strtrim.c	/^static size_t	ft_bk(char const *s1, char const *set)$/;"	f	file:
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t count, size_t size)$/;"	f
ft_fr	libft/ft_strtrim.c	/^static size_t	ft_fr(char const *s1, char const *set)$/;"	f	file:
ft_getdeli	libft/ft_split.c	/^static size_t	ft_getdeli(char const *s, char c)$/;"	f	file:
ft_getlen	libft/ft_itoa.c	/^static int	ft_getlen(int n)$/;"	f	file:
ft_getlen	libft/ft_putnbr_fd.c	/^static int	ft_getlen(int n)$/;"	f	file:
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f
ft_isspace	libft/ft_isspace.c	/^int	ft_isspace(int c)$/;"	f
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dest, const void *src, int c, size_t n)$/;"	f
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *d, void const *s, size_t n)$/;"	f
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dst, const void *src, size_t len)$/;"	f
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/;"	f
ft_ndec	libft/ft_itoa.c	/^static int	ft_ndec(int len)$/;"	f	file:
ft_ndec	libft/ft_putnbr_fd.c	/^static int	ft_ndec(int len)$/;"	f	file:
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_setsrc	libft/ft_split.c	/^static char	**ft_setsrc(size_t len)$/;"	f	file:
ft_setstr	libft/ft_split.c	/^static char	*ft_setstr(char **s, char c)$/;"	f	file:
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *s1)$/;"	f
ft_strdup2	gnl/get_next_line_utils.c	/^char	*ft_strdup2(const char *s1)$/;"	f
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t size)$/;"	f
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)$/;"	f
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *src)$/;"	f
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
getALElement	srcs/array_list/arraylist.c	/^t_ArrayListNode	*getALElement(t_ArrayList *pList, int position)$/;"	f
getArrayListLength	srcs/array_list/array_utils.c	/^int	getArrayListLength(t_ArrayList *pList)$/;"	f
get_next_line	gnl/get_next_line.c	/^int	get_next_line(int fd, char **line)$/;"	f
handler	main_02.c	/^void	handler(int signum)$/;"	f
init_bag	main_02.c	/^void	init_bag(t_bag *bag)$/;"	f
init_builtin	main_02.c	/^void	init_builtin(t_bag *bag)$/;"	f
init_rl_catch_signals	srcs/init/init_rl_catch_signals.c	/^void	init_rl_catch_signals()$/;"	f
isArrayListFull	srcs/array_list/array_utils.c	/^int	isArrayListFull(t_ArrayList *pList)$/;"	f
main	a.cpp	/^int main ()$/;"	f
main	main_02.c	/^int		main(void)$/;"	f
maxElementCount	srcs/array_list/arraylist.h	/^	int				maxElementCount;$/;"	m	struct:s_ArrayListType
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
pElement	srcs/array_list/arraylist.h	/^	t_ArrayListNode	*pElement;$/;"	m	struct:s_ArrayListType
removeALElement	srcs/array_list/arraylist.c	/^int	removeALElement(t_ArrayList *pList, int position)$/;"	f
s_ArrayListNodeType	srcs/array_list/arraylist.h	/^typedef struct s_ArrayListNodeType$/;"	s
s_ArrayListType	srcs/array_list/arraylist.h	/^typedef struct s_ArrayListType$/;"	s
s_bag	micro_shell.h	/^typedef struct s_bag$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
set_after_nl	gnl/get_next_line.c	/^char	*set_after_nl(char **backup, int *flagcheck, char **cur)$/;"	f
set_prev_nl	gnl/get_next_line.c	/^char	*set_prev_nl(char **backup, char **cur)$/;"	f
t_ArrayList	srcs/array_list/arraylist.h	/^}	t_ArrayList;$/;"	t	typeref:struct:s_ArrayListType
t_ArrayListNode	srcs/array_list/arraylist.h	/^}	t_ArrayListNode;$/;"	t	typeref:struct:s_ArrayListNodeType
t_bag	micro_shell.h	/^}	t_bag;$/;"	t	typeref:struct:s_bag
t_builtins	micro_shell.h	/^}	t_builtins;$/;"	t	typeref:enum:e_builtins
t_list	libft/libft.h	/^}				t_list;$/;"	t	typeref:struct:s_list
